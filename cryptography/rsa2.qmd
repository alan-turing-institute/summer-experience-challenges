# RSA scheme II


## Security

Finally, let's explore how secure the RSA scheme really is.

Specifically, let's consider the case where as an attacker, you already know the public key ($n$ and $e$) as well as the cipher text, $c = m^e \bmod n$.

Can you recover the message $m$?

TODO: Javascript widget to recover $d$ given $e$ and $\phi$, and then $m$ given $n$, $c$, and $d$. Much of this can probably be copied from rsa_encode.js.

> **Exercise 1:** Suppose you know that $n = 143$ and $e = 7$. You also know the encoded message is $c = 41$. Can you recover the decoded message $m$? <!-- Ans: d = 103, m = 50 -->
>
> Hint: You will need to figure out $d$ yourself using the same formula as before.
>
> **Exercise 2:** Suppose you know that $n = 373577$ and $e = 7$. You also know the encoded message is $c = 226918$. Can you recover the decoded message $m$, using the same strategy as above?  <!-- Ans: d = 319063, m = 500 -->

In the first case, you could probably figure out the factors $p$ and $q$, and go from there.

In the second case, it's a lot harder, because $n$ is a lot bigger.

But, we could get a computer to do it!


## Prime factorisation

TODO: Javascript widget that factorises the product of two primes and shows the time taken.

TODO: Maybe get the students to make a plot of log(time) vs number of digits in the product, or make another widget that does that for a given input.

> **Question:** How large do we need the numbers to be to make it reasonably secure?

## RSA in practice

How large do we actually make it?
