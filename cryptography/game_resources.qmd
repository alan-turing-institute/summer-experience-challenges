# Cryptography Game Resources

<script type="text/javascript">
{{< include rsa_shared.js >}}
{{< include rsa2_shared.js >}}
</script>
<script type="module">
{{< include game_resources.js >}}
</script>
<script type="module">
{{< include caesar.js >}}
</script>
<script type="module">
{{< include samples.js >}}
{{< include monosub_freq.js >}}
{{< include monosub_encode.js >}}
</script>


The goal of the game is to design a cryptographic protocol for communication between your
encryption and decryption teams, communicating solely via the ‘public-channel’. Scoring a point
for each successfully transmitted message, and taking a point away from your rival team for each
message your hackers can decipher.

## RULES

1. All communication with you corresponding teams must be via the public channel.
2. If using RSA for encryption no $n=pq$ greater than 500!
3. Any message can be sent via the public channel, but only those from the list of approved messages will score!

## Asymetric Encryption Tools (RSA)

Steps for implementing an RSA encryption scheme:

### Key Gen (by recipient)

The goal is to compute a triple $(e, d, n=pq)$:

1. Pick primes $p, q$ such that $n=pq > 127$, compute $n$.
2. Compute totient function $\phi=(p-1)(q-1)$ and pick $e<\phi$ such 
that $e$ and $\phi$ are coprime (i.e. $\gcd(e, \phi)=1$).
3. Pick $d$ such that $de \equiv 1\mod\phi$.
4. Send pair $(e, n)$ to sender.

### Encryption and Decryption

For a given $n$ character long message $s=s_0\ldots s_n$, with characters 
$\{s_i\}$, compute integer character representations $\{m_i\}$ using 
ASCII table below.

| Character ($s_i$) | Integer ($m_i$) | Character ($s_i$) | Integer ($m_i$) | 
|-------------------|-----------------|-------------------|-----------------|
| (space) | 31 | N | 53 |
| A | 41 | O | 54 |
| B | 42 | P | 55 |
| C | 43 | Q | 56 |
| D | 44 | R | 57 |
| E | 45 | S | 58 |
| F | 46 | T | 59 |
| G | 47 | U | 60 |
| H | 48 | V | 61 |
| J | 49 | W | 62 |
| K | 50 | X | 63 |
| L | 51 | Y | 64 |
| M | 52 | Z | 65 |

Then to encode or decode we simply need the subject, $s$ (either a message 
character integer $m_i$, or a cipher text integer $c_i$), the exponent 
(either $e$ for encyption or $d$ for decryption) and the modulus, $n$, to either 
encrypt a cipher text:
\begin{equation*}
    c_i = m_i^e \mod n,
\end{equation*} 
<div style="display: flex; justify-content: center">
*m* = &nbsp;<input type="text" size=4 id="c1" />, &nbsp;
*e* = &nbsp;<input type="text" size=4 id="d1" />, &nbsp;
*n* = &nbsp; <input type="text" size=4 id="n1" />, &nbsp;
*c* = &nbsp; <span id="m1-calc"/>
</div>
or decrypt a message:
\begin{equation*}
    m_i = c_i^d \mod n,
\end{equation*}
<div style="display: flex; justify-content: center">
*c* = &nbsp;<input type="text" size=4 id="c2" />, &nbsp;
*d* = &nbsp;<input type="text" size=4 id="d2" />, &nbsp;
*n* = &nbsp; <input type="text" size=4 id="n2" />, &nbsp;
*m* = &nbsp; <span id="m2-calc"/>
</div>

## Breaking RSA
To aid in cracking RSA we have provided you with a tool that computes the
quotient and remainder for two given numbers, i.e. given numbers $n$ and 
$d$ it returns the corresponding $q$ and $r$ from the equation:
\begin{equation*}
    n = q\cdot d + r
\end{equation*}
HINT: This will speed up finding $p$ and $q$ as well as the Euclidean 
algorithm!
<div style="display: flex; justify-content: center">
*n* = &nbsp;<input type="text" size=4 id="nh" />, &nbsp;
*d* = &nbsp;<input type="text" size=4 id="dh" />, &nbsp;
*q* = &nbsp;<span id="qh-calc"></span>, &nbsp;
*r* = &nbsp;<span id="rh-calc"></span>
</div>
